// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestJob01.Infrastructure.Data;

#nullable disable

namespace TestJob01.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TestJob01Context))]
    [Migration("20220209032219_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.Remainder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RemainderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId", "ProductId", "RemainderDate")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("WarehouseId", "ProductId", "RemainderDate"));

                    b.ToTable("Remainders");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Kid")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("ShipperId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ShipperId", "ReceiverId", "OperationDate")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("ShipperId", "ReceiverId", "OperationDate"));

                    b.ToTable("Transfers", (string)null);

                    b.HasDiscriminator<int>("Kid");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("TransferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferId", "ProductId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("TransferId", "ProductId"));

                    b.ToTable("TransferItems");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.Transfer", b =>
                {
                    b.HasBaseType("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferStorno", b =>
                {
                    b.HasBaseType("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase");

                    b.Property<Guid>("OriginalTransferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.Remainder", b =>
                {
                    b.HasOne("TestJob01.ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestJob01.ApplicationCore.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("TestJob01.ApplicationCore.ValueObjects.RemainderQuantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("RemainderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("RemainderId");

                            b1.ToTable("Remainders");

                            b1.WithOwner()
                                .HasForeignKey("RemainderId");
                        });

                    b.Navigation("Product");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase", b =>
                {
                    b.HasOne("TestJob01.ApplicationCore.Entities.Warehouse", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestJob01.ApplicationCore.Entities.Warehouse", "Shipper")
                        .WithMany()
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferItem", b =>
                {
                    b.HasOne("TestJob01.ApplicationCore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase", null)
                        .WithMany("TransferItems")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("TestJob01.ApplicationCore.ValueObjects.TransferQuantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("TransferItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("TransferItemId");

                            b1.ToTable("TransferItems");

                            b1.WithOwner()
                                .HasForeignKey("TransferItemId");
                        });

                    b.Navigation("Product");

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("TestJob01.ApplicationCore.Entities.TransferAggregate.TransferBase", b =>
                {
                    b.Navigation("TransferItems");
                });
#pragma warning restore 612, 618
        }
    }
}
