@inject ILogger<TransferDeleteDialog> Logger
@inject IJSRuntime JSRuntime
@inject ITransferHeadService TransferHeadService
@inherits BlazorComponent

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
  <div class="modal-dialog" role="document">
    <div class="modal-header">
      <h5 class="modal-title" id="exampleModalLabel">Удаление перемещения</h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body">
      @if (_item == null)
      {
        <Spinner></Spinner>
      }
      else
      {
        <div class="container">
          <div class="row">
            <dl class="col-md-6 dl-horizontal">
              <dt>Откуда</dt>
              <dd>@_item.ShipperName</dd>
              <dt>Куда</dt>
              <dd>@_item.ReceiverName</dd>
              <dt>Дата</dt>
              <dd>@_item.OperationDate</dd>
            </dl>
          </div>

        </div>
      }

    </div>

    <div class="modal-content">
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
        @if (_item != null)
        {
          <button class="btn btn-danger" @onclick="() => DeleteClick(_item!.Id)">Удалить</button>
        }
      </div>
    </div>
  </div>
</div>

@*@if (_showDeleteModal)
{
  <div class="modal-backdrop fade show"></div>
}*@

@code {
  [Parameter]
  public EventCallback<string> OnSaveClick { get; set; }

  private TransferHead? _item;

  private string _modalDisplay = "none;";
  private string _modalClass = "";
  private bool _showDeleteModal = false;


  private async Task DeleteClick(Guid id)
  {
    //await TransferHeadService.Delete(id);

    await OnSaveClick.InvokeAsync(null);
    await Close();
  }

  public async Task Open(TransferHead item)
  {
    _item = item;

    await new Css(JSRuntime).HideBodyOverflow();
    _modalDisplay = "block;";
    _modalClass = "Show";
    _showDeleteModal = true;

    StateHasChanged();
  }

  private async Task Close()
  {
    await new Css(JSRuntime).ShowBodyOverflow();
    _modalDisplay = "none";
    _modalClass = "";
    _showDeleteModal = false;
  }

}
